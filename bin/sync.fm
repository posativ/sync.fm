#!/usr/bin/env python
#-*- coding: utf-8 -*-
# 
# Copyright 2011 posativ <info@posativ.org>. All rights reserved.
# License: BSD Style, 2 clauses

import sys; reload(sys)
sys.setdefaultencoding('utf-8')

import logging
import os
import urllib
import shutil

from os.path import join, expanduser, isdir, isfile, getmtime, basename

from syncfm.tools import ColorFormatter, lastfm2local, fat32
from syncfm.collection import Library, LastfmHistory

log = logging.getLogger('syncfm')

if __name__ == '__main__':
    
    from optparse import OptionParser, make_option
    
    console = logging.StreamHandler()
    console.setFormatter(ColorFormatter('[%(levelname)s] %(name)s.py: %(message)s'))
    log.addHandler(console)
    
    options = [
            # make_option("-h", "--history", dest="history", metavar="FILE",
            #                   help="your last.fm history"),
            # make_option("-d", "--music-dir", dest="music", metavar="DIR",
            #                   help="force overwrite"),
            # make_option("-x", "--xml-file", dest="xml", metavar="FILE",
            #                   help="a xml file generated by `dump`",
            #                   default=None),
            make_option("-f", "--force", action="store_const", dest="force",
                              default=False),
            make_option("-q", "--quit", action="store_const", dest="verbose",
                              help="be silent (mostly)", const=logging.ERROR,
                              default=logging.INFO),
            make_option("--debug", action="store_const", dest="verbose",
                              help="debug information", const=logging.DEBUG)
        ]
    
    parser = OptionParser(option_list=options)
    (options, args) = parser.parse_args()
    log.setLevel(options.verbose)
    
    fmap = [ expanduser(f) for f in [
            '~/.sync-fm/index/',
            '~/.sync-fm/folders',
            '~/.sync-fm/index/lookup',
            '~/.sync-fm/index/library.xml',
        ]]
    
    for fname in fmap:
        try:
            if fname.endswith('/'):
                if not isdir(fname):
                    os.makedirs(fname)
            elif not isfile(fname):
                with file(fname, 'a'):
                    os.utime(fname, None)
        except OSError:
            log.fatal("unable to create '%s'", fname)
            
    
    if len(args) < 1:
        parser.print_usage()
        sys.exit(1)
        
    if not isdir(expanduser('~/.sync-fm')):
        os.mkdir(expanduser('~/.sync-fm'))
    if not isfile(expanduser(fmap[1])):
        open(fmap[1], 'w')
    
    if args[0] == 'update':
        
        ## find and update filesystem changes
        
        dirs = dict([line.strip().split('\t') for line in open(fmap[1], 'r')])
        
        if args[1:]:
            for path in args[1:]:
                path = expanduser(path)
                if not isdir(path):
                    log.fatal("'%s' is not a directory" % path)
                    continue
                if not path in dirs:
                    dirs[path] = 0
                    with open(fmap[1], 'a') as f:
                        f.write('\t'.join((path, '0')) + '\n')
        
        if options.force:
            dirs = dict([line.strip().split('\t') for line in open(fmap[1], 'r')])
        
        to_update = [item for item in dirs if getmtime(item) != float(dirs[item])]
        for item in to_update:
            fname = join(fmap[0], urllib.quote_plus(item))
            with file(fname, 'w') as f:
                f.write(Library(item).index().toxml())
            
            dirs[item] = getmtime(item)
            
        if to_update:
            with file(fmap[1], 'w') as f:
                for item, ts in sorted(dirs.iteritems(), key=lambda k: k[0]):
                    f.write('\t'.join((item, str(ts))) + '\n')
                    
        ## update last.fm history
        
        # TODO...
        
        ## apply last.fm history to Library
        
        dirs = [line.strip().split('\t')[0] for line in open(fmap[1], 'r')]
        lib = Library(fmap[0] + urllib.quote_plus(dirs.pop())).load()
        for dname in dirs:
            tmp = Library(fmap[0] + urllib.quote_plus(dname)).load()
            lib.merge(tmp)
            
        history = LastfmHistory('posativ.txt')
        lookuptable = dict([line.strip().split('\t') for line in open(fmap[2], 'r')])
        
        lib, lookuptable = lastfm2local(history, lib, lookuptable)
        with file(fmap[2], 'w') as f:
            for item in lookuptable:
                f.write(item + '\t' + lookuptable[item] + '\n')
        with file(fmap[3], 'w') as f:
            f.write(lib.toxml())
        
        
    elif args[0] == 'sync':
        
        if len(args[1:]) < 1:
            log.fatal('sync requires a valid directory')
            sys.exit(1)  
        elif not isdir(args[1]):
            log.fatal("'%s' is not a directory", args[1])
            sys.exit(1)
        
        device = args[1]

        lib = Library(fmap[3]).load()
        top_tracks = []
        
        for artist in lib:
            for track in lib[artist]:
                if track.count >= 25:
                    top_tracks.append(track)
        
        
        #lib = Library(fmap[0] + r'%2FUsers%2Fich%2FMusic%2F').load()
        #print lib
        
        #history = LastfmHistory('posativ.txt', 'posativ\'s history')
        # print history
        
        # top_tracks = []
        # for artist in history:
        #     for track in artist:
        #         if track.count > 20:
        #             top_tracks.append(track)
        #     
        for i, t in enumerate(sorted(top_tracks, key=lambda k: k.count, reverse=True)):
            
            dirpath = join(device, fat32(t.artist), fat32(t.album))
            try:
                os.makedirs(dirpath)
            except OSError:
                pass # (already exists)
            
            shutil.copy(t.path, join(dirpath, basename(t.path)))
            print join(dirpath, basename(t.path))
            
            
#            print "mkdir -p", join(artist, album)
#            print "cp -v", "'"+t.path+"'", "'"+join('/Volumes/Memory card/MUSIC/', artist, album) + '/'+"'"
            #print '%s: %s' % (str(i+1).rjust(2), t)
        
        # log.info("loading lastfm history... '%s'" % options.history)
        # lastfm = fm.read(options.history)
        #     
        # log.info("scanning local music... '%s'" % options.music)
        # lib = Library(options.music)
